( define ( iterative-improve good-enough? improve-guess )
         ( lambda ( x )  
                  ( define ( solve guess )
                           ( let (( next ( improve-guess guess )))
                                 ( if ( good-enough? guess next )
                                      guess
                                      ( solve next ))))
                  ( solve x )))

( define ( sqt n )
         ( define ( improve-guess guess )
                  ( define ( average v1 v2 )
                           ( / ( + v1 v2 ) 2 ))
                  ( average guess ( / n guess )))
         ( define ( sqrt-good-enough? guess x )
                  ( define ( square n )
                           ( * n n ))
                  ( define tolerance 0.0001 )
                  ( < ( abs ( - guess x )) tolerance )
                  )
         (( iterative-improve sqrt-good-enough? improve-guess ) 2.0 ))

( define ( fixed-point f first-guess )
         ( define ( close-enough? v1 v2 )
                  ( define tolerance 0.0000000001 )
                  ( < ( abs ( - v1 v2 )) tolerance ))
         (( iterative-improve close-enough? f ) first-guess ))

;( sqt 6 )
( fixed-point cos 2.0 )
