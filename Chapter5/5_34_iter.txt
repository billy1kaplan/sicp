;; Set up the iter lambda function
(assign val (op make-compiled-procedure) (label entry1) (reg env))
(goto (label after-lambda2))
entry1
(assign env (op compiled-procedure-env) (reg proc))
;; Extend the environment with the arguments
(assign env (op extend-environment) (const (product counter n)) (reg arg1) (reg env))
;; save current continuation
(save continue)
;; save env
(save env)
(assign proc (op lookup-variable-value) (const >) (reg env))
(assign val (op lookup-variable-value) (const n) (reg env))
(assign arg1 (op list) (reg val))
(assign val (op lookup-variable-value) (const counter) (reg env))
(assign arg1 (op cons) (reg val) (reg arg1))
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch6))
compiled-branch7
(assign continue (label after-call8))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch6
(assign val (op apply-primitive-procedure) (reg proc) (reg arg1))
after-call8
(restore env)
(restore continue)
(test (op false?) (reg val)) ;; perform the iterative fact check
(branch (label false-branch4))
true-branch3
(assign val (op lookup-variable-value) (const product) (reg env))
(goto (reg continue)) ;; we're done, no need to restore any continuation
false-branch4
(assign proc (op lookup-variable-value) (const iter) (reg env))
(save continue)
(save proc)
(save env)
(assign proc (op lookup-variable-value) (const +) (reg env))
(assign val (const 1))
(assign arg1 (op list) (reg val))
(assign val (op lookup-variable-value) (const counter) (reg env))
(assign arg1 (op cons) (reg val) (reg arg1))
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch12))
compiled-branch13
(assign continue (label after-call14))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch12
(assign val (op apply-primitive-procedure) (reg proc) (reg arg1))
after-call14
(assign arg1 (op list) (reg val))
(restore env)
(save arg1)
(assign proc (op lookup-variable-value) (const *) (reg env))
(assign val (op lookup-variable-value) (const product) (reg env))
(assign arg1 (op list) (reg val))
(assign val (op lookup-variable-value) (const counter) (reg env))
(assign arg1 (op cons) (reg val) (reg arg1))
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch9))
compiled-branch10
(assign continue (label after-call11))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch9
(assign val (op apply-primitive-procedure) (reg proc) (reg arg1))
after-call11
(restore arg1)
(assign arg1 (op cons) (reg val) (reg arg1))
(restore proc) ;; this is the recursive call
(restore continue)
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch15))
compiled-branch16
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val)) ;; <= key goto, no need to reassign the coninuation
primitive-branch15
(assign val (op apply-primitive-procedure) (reg proc) (reg arg1))
(goto (reg continue))
after-call17
after-if5
after-lambda2
(perform (op define-variable!) (const iter) (reg val) (reg env))
(assign val (const ok))
(assign val (op make-compiled-procedure) (label entry18) (reg env))
(goto (label after-lambda19))
entry18
(assign env (op compiled-procedure-env) (reg proc))
(assign env (op extend-environment) (const (n)) (reg arg1) (reg env))
(assign proc (op lookup-variable-value) (const iter) (reg env))
(assign val (const 1))
(assign arg1 (op list) (reg val))
(assign val (const 1))
(assign arg1 (op cons) (reg val) (reg arg1))
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch20))
compiled-branch21
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch20
(assign val (op apply-primitive-procedure) (reg proc) (reg arg1))
(goto (reg continue))
after-call22
after-lambda19
(perform (op define-variable!) (const factorial) (reg val) (reg env))
(assign val (const ok))
