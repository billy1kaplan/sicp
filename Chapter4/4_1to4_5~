#lang racket

;; 4.1

(define (eval exp env)
  ('exp))

(define (no-operands? exps)
  (null? exps))

(define (first-operand exps)
  (car exps))

(define (rest-operands exps)
  (cdr exps))

(define (list-of-values-l exps env)
  (if (no-operands? exps)
      null
      (let ([left (eval (first-operand exps) env)])
        (cons left
              (list-of-values-l (rest-operands exps) env)))))

(define (list-of-values-r exps env)
  (if (no-operands? exps)
      null
      (let ([right (list-of-values-r (rest-operands exps) env)])
        (cons (eval (first-operand exps) env)
              right))))

;; 4.2
;; a). The problem with this approach is that multiple patterns fall under the concept of "procedure application"
;; We would attempt to lookup a value called 'define' in the global environment. However, we need the environment itself for the define procedure.

;; b). If we add the tag 'call...
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))

(define (call? exp) (tagged-list? exp 'call))

;; ((call? exp)
;;  (apply (eval (operator exp) env)
;;         (list-of-values (operands exp) env))

;; 4.3

(define (attach-tag type-tag contents)
  (cons type-tag contents))

(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged datum -- TYPE-TAG" datum)))

(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "Bad tagged datum -- CONTENTS" datum)))

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ([proc (get op type-tags)])
      (if proc
          (apply proc (map contents args))
          (error
           "No method for these types -- APPLY-GENERIC"
           (list op type-tags))))))

(define (self-evaluating? exp)
  (cond ((number? exp) true)
        ((string? exp) true)
        ((boolean? exp) true)
        (else false)))

(define (variable? exp)
  (symbol? exp))

(define (assignment? exp)
  (tagged-list? exp 'set!))

(define (definition? exp)
  (tagged-list? exp 'define))

(define (if? exp)
  (tagged-list? exp 'if))

(define (lambda? exp)
  (tagged-list? exp 'lambda))

(define (lambda-parameters exp) (cadr exp))

(define (lambda-body exp) (cddr exp))

(define (begin? exp)
  (tagged-list? exp 'begin))

(define (begin-actions exp)
  (cdr exp))

(define (last-exp? seq)
   (null? (cdr seq)))

(define (first-exp seq) (car seq))

(define (rest-exps seq) (cdr seq))

(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))

(define (make-begin seq) (cons 'begin seq))

;; Conditionals
(define (if-predicate exp)
  (cadr exp))

(define (if-consequent exp) (caddr exp))

(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (cadddr exp)
      'false))

(define (eval-if exp env)
  (if (true? (data-eval (if-predicate exp) env))
      (data-eval (if-consequent exp) env)
      (data-eval (if-alternative exp) env)))

(define (cond? exp)
  (tagged-list? exp 'cond))

(define (cond-clauses exp) (cdr exp))

(define (cond-else-clause? clause)
  (eq? (cond-predicate clause 'else)))

(define (cond-predicate clause) (car clause))

(define (cond-actions clause) (cdr clause))

(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))

(define (expand-clauses clauses)
  (if (null? clauses)
      'false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clause? first)
            (if (null? rest)
                (sequence->exp (cond-actions first))
                (error "ELSE clause isn't last -- COND->IF" clauses))
            (make-if (cond-predicate first)
                     (sequence->exp (cond-actions first))
                     (expand-clauses rest))))))

(define (application? exp)
  (pair? exp))

(define (list-of-values exps env)
  (if (no-operands? exps)
      null
      (cons (data-eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))


(define (application exp)
  (pair? exp))

(define (quoted? exp)
  (tagged-list? exp 'quote))

(define (operator exp)
  (car exp))

(define (operands exp) (cdr exp))

(define (text-of-quoted exp) (caddr exp))

(define (lookup-variable-value exp env)
  (cond [(null? env) (error "Unbound variable")]
        [(eq? (car exp) (caar env)) (cadr env)]
        [else (lookup-variable-value exp (cdr env))]))

(define (data-eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((get 'eval (car exp)) (apply (get 'eval (car exp)) exp env))
        ((application? exp)
         (apply
          (eval (operator exp) env)
          (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type" exp))))


;(define (apply procedure arguments)
;  (cond ((primitive-procedure? procedure)
;         (apply-primitive-procedure procedure arguments))
;        ((compound-procedure? procedure)
;         (eval-sequence
;          (procedure-body procedure)
;          (extend-environment
;           (procedure-parameters procedure)
;           arguments
;           (procedure-environment procedure))))
;        (else
;         (error
;          ("Unknown procedure type -- APPLY" procedure)))))

(define (get key1 key2)
  (hash-ref ops (cons key1 key2)))

(define (put key1 key2 value)
  (hash-set! ops (cons key1 key2) value))

(define ops (make-hash))

(define (and-clauses exp) (cdr exp))

(define (true? exp)
  exp)

(define (check-and clauses env)
  (if (null? clauses)
      true
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (true? (data-eval first env))
            (check-and rest env)
            false))))
                                                        
(define (eval-or clauses env)
  (if (null? clauses)
      false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (true? (data-eval first env))
            true
            (eval-or rest env)))))

(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))

(define (eval-and-derived clauses)
  (if (null? clauses)
      true
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (make-if first
                 (eval-and-derived rest)
                 false))))


(define (eval-or-derived clauses)
  (if (null? clauses)
      false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (make-if first
                 true
                 (eval-or-derived rest)))))

;; Dispatch Table
(put 'eval 'if eval-if)
(put 'eval 'cond cond->if)
(put 'eval 'and eval-and-derived)
(put 'eval 'or eval-or-derived)