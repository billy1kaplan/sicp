#lang racket
(define (make-queue)
  (let ([front-ptr null]
        [rear-ptr null])
    (define (empty-queue?)
      (null? front-ptr))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" front-ptr)
          (mcar front-ptr)))
    (define (insert-queue item)
      (let ([new-item (mcons item null)])
        (cond [(null? front-ptr)
               (set-front-ptr! new-item)
               (set-rear-ptr! new-item)
               front-ptr]
              [#t
               (set-mcdr! rear-ptr new-item)
               (set-rear-ptr! new-item)
               front-ptr])))
    (define (delete-queue)
      (cond [(empty-queue?)
             (error "DELETE called with an empty queue" front-ptr)]
            [#t
             (set-front-ptr! (mcdr front-ptr))
             front-ptr]))
          
        
      
    (define (dispatch m)
      (cond [(eq? m 'front-queue) front-queue]
            [(eq? m 'delete-queue) delete-queue]
            [(eq? m 'insert-queue) insert-queue]))
    dispatch))