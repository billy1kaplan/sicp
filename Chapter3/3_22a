#lang racket
(define (make-dequeue)
  (let ([front-ptr null]
        [rear-ptr null])
    (define (empty-dequeue?)
      (or (null? front-ptr)
          (null? rear-ptr)))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (prev ptr)
      (mcar (mcdr ptr)))
    (define (next ptr)
      (mcdr (mcdr ptr)))
    (define (front-dequeue)
      (if (empty-dequeue?)
          (error "FRONT called with an empty dequeue" front-ptr)
          (mcar front-ptr)))
    (define (rear-dequeue)
      (if (empty-dequeue?)
          (error "REAR called with an empty dequeue" rear-ptr)
          (mcar rear-ptr)))
    (define (front-insert-dequeue! item)
      (let ([copy front-ptr]
            [new-item (mcons item (mcons null null))])
        (cond [(null? front-ptr)
               (set-front-ptr! new-item)
               (set-rear-ptr! new-item)
               front-ptr]
              [#t
               (set-mcar! (mcdr front-ptr) new-item)
               (set-mcdr! (mcdr new-item) copy)
               (set-front-ptr! new-item)
               front-ptr])))
        (define (rear-insert-dequeue! item)
      (let ([new-item (mcons item (mcons null null))])
        (cond [(null? rear-ptr)
               (set-front-ptr! new-item)
               (set-mcdr! (mcar new-item) rear-ptr)
               (set-rear-ptr! new-item)
               front-ptr]
              [#t
               (set-mcdr! (mcdr rear-ptr) new-item)
               (set-rear-ptr! new-item)
               front-ptr])))
    (define (front-delete-dequeue!)
      (cond [(empty-dequeue?)
             (error "DELETE called with an empty queue" front-ptr)]
            [(null? (mcdr (mcdr front-ptr)))
             (set-front-ptr! null)
             null]
            [#t
             (set-front-ptr! (next front-ptr))
             (set-mcar! (mcdr front-ptr) null)
             front-ptr]))
    (define (rear-delete-dequeue!)
      (cond [(empty-dequeue?)
             (error "DELETE called with an empty queue" front-ptr)]
            [(null? (mcar (mcdr rear-ptr)))
             (set-rear-ptr! null)
             null]
            [#t
             (set-rear-ptr! (prev rear-ptr))
             (set-mcdr! (mcdr rear-ptr) null)
             front-ptr]))
    (define (print)
      map mcar front-ptr)
    (define (dispatch m)
      (cond [(eq? m 'front-dequeue) front-dequeue]
            [(eq? m 'rear-dequeue) rear-dequeue]
            [(eq? m 'empty-dequeue?) empty-dequeue?]
            [(eq? m 'front-delete-dequeue!) front-delete-dequeue!]
            [(eq? m 'rear-delete-dequeue!) rear-delete-dequeue!]
            [(eq? m 'front-insert-dequeue!) front-insert-dequeue!]
            [(eq? m 'rear-insert-dequeue!) rear-insert-dequeue!]
            [(eq? m 'print) print]))
    dispatch))