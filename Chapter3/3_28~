#lang racket
(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ([new-value
           (logical-and (get-signal a1) (get-signal a2))])
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)

(define (logical-and a1 a2)
  (cond [(= a1 a2 1) 1]
        [(and (= a1 0) (= a2 1)) 0]
        [(and (= a1 1) (= a2 0)) 0]
        [(and (= a1 0) (= a2 0)) 0]
        [#t
         (error "Invalid signal")]))

(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ([new-value
           (logical-or (get-signal a1) (get-signal a2))])
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)

(define (logical-or a1 a2)
  (cond [(= a1 a2 1) 1]
        [(or (= a1 0) (= a2 1)) 0]
        [(or (= a1 1) (= a2 0)) 0]
        [(and (= a1 0) (= a2 0)) 0]
        [#t
         (error "Invalid signal")]))

(define (make-wire)
  (let ([signal 0]
        [actions (mcons "-HEAD-" null)])
    (define (get-signal)
      signal)
    (define (set-signal! new-signal)
      (set! signal new-signal))
    (define (add-action! action)
      (let ([all-actions (mcons action actions)])
        (set-mcdr! actions all-actions)))

    (define (dispatch m)
      (cond [(eq? 'get-signal m) get-signal]
            [(eq? 'set-signal! m) set-signal!]
            [(eq? 'add-action! m) add-action!]
            [#t
             (error "Unexpected Operation")]))
    dispatch))

(define (get-signal wire) ((wire 'get-signal)))
(define (set-signal! wire new-value) ((wire 'set-signal!) new-value))
(define (add-action! wire new-action) ((wire 'add-action!) new-action))

(define (after-delay delay f)
  (f))

(define and-gate-delay 0.01)
(define or-gate-delay 0.05)