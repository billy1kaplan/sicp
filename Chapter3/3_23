#lang racket
(define (make-table same-key?)
  (define (assoc key lst)
    (if (null? lst)
        #f
        (if (same-key? (mcar (mcar lst)) key)
            (mcar lst)
            (assoc key (mcdr lst)))))
  (let ([local-table (mcons '*table* null)])
    (define (lookup key-1 key-2)
      (let ([subtable (assoc key-1 (mcdr local-table))])
        (if subtable
            (let ([record (assoc key-2 (mcdr subtable))])
              (if record
                  (mcdr record)
                  false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ([subtable (assoc key-1 (mcdr local-table))])
        (if subtable
            (let ((record (assoc key-2 (mcdr subtable))))
              (if record
                  (set-mcdr! record value)
                  (set-mcdr! subtable
                             (mcons (mcons key-2 value)
                                    (mcdr subtable)))))
            (set-mcdr! local-table
                       (mcons (mcons key-1
                                     (mcons (mcons key-2 value)
                                            null))
                              (mcdr local-table)))))
      'ok)
    (define (dispatch m)
      (cond [(eq? m 'lookup-proc) lookup]
            [(eq? m 'insert-proc!) insert!]
            [#t (error "Unknown operation -- TABLE" m)]))
    dispatch))
  
