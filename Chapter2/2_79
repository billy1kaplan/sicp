#lang racket

;; ordinary numbers
(put `equ? `(scheme-number scheme-number)
     (lambda (x y) (= x y)))

;; rational numbers
(put `equ? `(rational rational)
     (lambda (x y) (and (= (numer x) (numer y))
                        (= (denom x) (denom y)))))

;; complex
(put `equ `(complex complex) equ?)

(define (equ? z1 z2)
  (and (= (real-part z1) (real-part z2))
       (= (imag-part z1) (imag-part z2))))

;; install in package
(define (equ? x y) (apply-generic `equ? x y))
                      