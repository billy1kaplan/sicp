#lang sicp

;Tree data structure
(define (entry tree) (car tree))

(define (left-branch tree)
  (cadr tree))

(define (right-branch tree) (caddr tree))

(define (make-tree entry left right)
  (list entry left right))

; Record data structure
(define (key record)
  (car record))

(define (name record)
  (cadr record))

(define (title record)
  (caddr record))

(define (make-record key name title)
  (list key name title))

; Helpers
(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
    (cons '() elts)
    (let ((left-size (quotient (- n 1) 2)))
      (let ((left-result (partial-tree elts left-size)))
        (let ((left-tree (car left-result))
              (non-left-elts (cdr left-result))
              (right-size (- n (+ left-size 1 ))))
          (let ((this-entry (car non-left-elts))
                (right-result (partial-tree (cdr non-left-elts)
                                            right-size)))
            (let ((right-tree (car right-result))
                  (remaining-elts (cdr right-result)))
              (cons (make-tree this-entry left-tree right-tree)
                    remaining-elts))))))))
; lookup
(define (lookup given-key set-of-records)
  (cond ((null? set-of-records) #f)
        ((equal? given-key (key (entry set-of-records))) (entry set-of-records))
        ((> given-key (key (entry set-of-records))) (lookup given-key (left-branch set-of-records)))
        ((< given-key (key (entry set-of-records))) (lookup given-key (right-branch set-of-records)))))

(lookup 1 (list->tree (list (make-record 1 "Paul" "Mr.")
                (make-record 3 "George" "Mrs.")
                (make-record 5 "Scott" "Ms.")
                (make-record 5 "Peter" "Ms."))))
