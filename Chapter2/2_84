#lang racket

(define (type-tag arg)
  (car arg))

(define (apply-generic op . args)
  (let* [(type-tags (map type-tag args))
         (proc (get op type-tags))]
    (if proc
        (apply proc (map contents args))
        ((define (raise-type current target)
           (if ((eq? type-tag current) target)
               current
               (get `raise (type-tag current) (contents current))))
         (define (try-to-coerce tags)
           (if (null? tags)
               (error "No method for these types" (list op type-tags))
               (let (coerced (coerce-tags (car tags)))
                 (if (check-tags coerced)
                     (let ((proc (apply-generic op coerced)))
                       (if proc
                           (apply proc (map contents args))
                           (try-to-coerce (cdr tags)))
                       (try-to-coerce (cdr tags)))))))))))