( define ( reverse lst )
         ( define ( iter lst res )
                  ( if ( null? lst )
                       res
                       ( iter ( cdr lst ) ( cons ( car lst ) res ))))
         ( iter lst '()))

( define ( same-parity fst . lst )
         ( define ( filter el )
                  ( = ( remainder el 2 ) ( remainder fst 2 )))
         ( define ( iter lst res )
                  ( cond (( null? lst ) res )
                         (( filter ( car lst )) ( iter ( cdr lst ) ( cons ( car lst ) res )))
                         ( else ( iter ( cdr lst ) res ))))
         ( cons fst ( reverse ( iter ( cdr lst ) '() ))))

( define ( same-parity1 fst . lst )
         ( define ( filter el )
                  ( = ( remainder el 2 ) ( remainder fst 2 )))
         ( define ( iter lst )
                  ( cond (( null? lst ) '() )
                         (( filter ( car lst )) ( cons ( car lst ) ( iter ( cdr lst ))))
                         ( else ( iter ( cdr lst )))))
         ( cons fst ( iter lst )))

( define ( same-parity1 fst . lst )
         ( define ( filter el )
                  ( = ( remainder el 2 ) ( remainder fst 2 )))
         ( define ( iter el . lst )
                  ( cond (( null? lst ) el )
                         (( filter el ) ( cons el ( iter lst )))
                         ( else ( iter lst))))
         ( cons fst ( iter lst )))

( same-parity1 1 2 3 4 5 6 7 )
( same-parity 2 3 4 5 6 7 )
